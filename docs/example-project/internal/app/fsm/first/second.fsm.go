// Code generated by fsm-generator. DO NOT EDIT.
package first

import (
	"time"

	"fsm-framework/fsm-engine/model"
)

var SecondState model.State = &SecondStateDeclaration{}

type SecondStateDeclaration struct {
}

func (s *SecondStateDeclaration) Name() string {
	return "FIRST_TX_SECOND"
}

func (s *SecondStateDeclaration) EventType() string {
	return "first_tx_second_state_event"
}

func (s *SecondStateDeclaration) Queue() string {
	return "first_tx_second_state_event_queue"
}

func (s *SecondStateDeclaration) CanTransitIn(state model.State) bool {
	if state == SecondState {
		return true
	}

	if state == ErrState {
		return true
	}

	if state == DoneState {
		return true
	}

	return false
}

func (s *SecondStateDeclaration) MaxRetiesCount() int {
	return 3
}

func (s *SecondStateDeclaration) MinRetiesDelay() time.Duration {
	return 15 * time.Second // 15s
}

func (s *SecondStateDeclaration) CancellationTTL() time.Duration {
	return 1800 * time.Second // 30m0s
}

func (s *SecondStateDeclaration) FallbackState() model.State {
	return nil
}

func (s *SecondStateDeclaration) IsInitial() bool {
	return false
}

func (s *SecondStateDeclaration) IsSuccessFinal() bool {
	return false
}

func (s *SecondStateDeclaration) IsFailFinal() bool {
	return false
}

func (s *SecondStateDeclaration) Model() model.Model {
	return Model
}

func (s *SecondStateDeclaration) Service() Service {
	return Model.Service().(Service)
}
