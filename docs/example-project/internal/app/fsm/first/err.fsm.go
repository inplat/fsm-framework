// Code generated by fsm-generator. DO NOT EDIT.
package first

import (
	"time"

	"github.com/inplat/fsm-framework.git/fsm-engine/model"
)

var ErrState model.State = &ErrStateDeclaration{}

type ErrStateDeclaration struct {
}

func (s *ErrStateDeclaration) Name() string {
	return "FIRST_TX_ERR"
}

func (s *ErrStateDeclaration) EventType() string {
	return "first_tx_err_state_event"
}

func (s *ErrStateDeclaration) Queue() string {
	return "first_tx_err_state_event_queue"
}

func (s *ErrStateDeclaration) CanTransitIn(state model.State) bool {
	if state == ErrState {
		return true
	}

	return false
}

func (s *ErrStateDeclaration) MaxRetiesCount() int {
	return 3
}

func (s *ErrStateDeclaration) MinRetiesDelay() time.Duration {
	return 15 * time.Second // 15s
}

func (s *ErrStateDeclaration) CancellationTTL() time.Duration {
	return 1800 * time.Second // 30m0s
}

func (s *ErrStateDeclaration) FallbackState() model.State {
	return nil
}

func (s *ErrStateDeclaration) IsInitial() bool {
	return false
}

func (s *ErrStateDeclaration) IsSuccessFinal() bool {
	return false
}

func (s *ErrStateDeclaration) IsFailFinal() bool {
	return true
}

func (s *ErrStateDeclaration) Model() model.Model {
	return Model
}

func (s *ErrStateDeclaration) Service() Service {
	return Model.Service().(Service)
}
