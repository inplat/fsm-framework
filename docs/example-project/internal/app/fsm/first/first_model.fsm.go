// Code generated by fsm-generator. DO NOT EDIT.
// Model revision v.b1a7d2
package first

import (
	"github.com/inplat/fsm-framework.git/fsm-engine/model"
)

var Model model.Model = &FirstModel{}

type FirstModel struct {
	fsmEngine model.Engine
	svc       Service
}

func (m *FirstModel) Name() string {
	return "first"
}

func (m *FirstModel) States() []model.State {
	return []model.State{
		CreatedState,
		SecondState,
		ErrState,
		DoneState,
	}
}

func (m *FirstModel) Resolve(name string) model.State {
	switch name {
	case CreatedState.Name():
		return CreatedState
	case SecondState.Name():
		return SecondState
	case ErrState.Name():
		return ErrState
	case DoneState.Name():
		return DoneState
	}

	return nil
}

func (m *FirstModel) Has(state model.State) bool {
	if state == CreatedState {
		return true
	}
	if state == SecondState {
		return true
	}
	if state == ErrState {
		return true
	}
	if state == DoneState {
		return true
	}
	return false
}

func (m *FirstModel) SetEngine(engine model.Engine) {
	m.fsmEngine = engine
}

func (m *FirstModel) Engine() model.Engine {
	return m.fsmEngine
}

func (m *FirstModel) SetService(svc interface{}) error {
	var ok bool

	m.svc, ok = svc.(Service)
	if !ok {
		return model.ErrServiceNotImplementedInterface
	}

	return nil
}

func (m *FirstModel) Service() interface{} {
	return m.svc
}
