{{- /* gotype: morpheus/pkg/fsm-generator.TemplateModel */ -}}
// Code generated by fsm-generator. DO NOT EDIT.
// Model revision v.{{ .Model.ETag }}
package {{ .Model.Name | snake }}

import (
  "github.com/inplat/fsm-framework.git/fsm-engine/model"
)

var Model model.Model = &{{ .Model.Name | camel }}Model{}

type {{ .Model.Name | camel }}Model struct{
    fsmEngine model.Engine
    svc       Service
}

func (m *{{ .Model.Name | camel }}Model) Name() string {
	return "{{ .Model.Name | snake }}"
}

func (m *{{ .Model.Name | camel }}Model) States() []model.State {
    return []model.State{
    {{- range $val := .Model.States}}
        {{$val.Name | camel}}State,
    {{- end}}
    }
}

func (m *{{ .Model.Name | camel }}Model) Resolve(name string) model.State {
    switch name {
    {{- range $val := .Model.States}}
    case {{$val.Name | camel}}State.Name():
        return {{$val.Name | camel}}State
    {{- end}}
    }

    return nil
}

func (m *{{ .Model.Name | camel }}Model) Has(state model.State) bool {
    {{- range $val := .Model.States}}
    if state == {{$val.Name | camel}}State {
    	return true
    }

    {{- end}}
    return false
}

func (m *{{ .Model.Name | camel }}Model) SetEngine(engine model.Engine) {
    m.fsmEngine = engine
}

func (m *{{ .Model.Name | camel }}Model) Engine() model.Engine {
    return m.fsmEngine
}

func (m *{{ .Model.Name | camel }}Model) SetService(svc interface{}) error {
    var ok bool

    m.svc, ok = svc.(Service)
    if !ok {
        return model.ErrServiceNotImplementedInterface
    }

    return nil
}

func (m *{{ .Model.Name | camel }}Model) Service() interface{} {
    return m.svc
}