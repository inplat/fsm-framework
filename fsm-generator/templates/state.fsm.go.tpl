{{- /* gotype: morpheus/pkg/fsm-generator.TemplateModel */ -}}
// Code generated by fsm-generator. DO NOT EDIT.
package {{ .Model.Name | snake }}

import (
    "time"

    "fsm-framework/fsm-engine/model"
)

var {{ .State.Name | camel }}State model.State = &{{ .State.Name | camel }}StateDeclaration{}

type {{ .State.Name | camel }}StateDeclaration struct {
}

func (s *{{ .State.Name | camel }}StateDeclaration) Name() string {
    return "{{ .Model.Prefix | upper }}{{ .State.Name | screaming_snake }}"
}

func (s *{{ .State.Name | camel }}StateDeclaration) EventType() string {
    return "{{ .Model.Prefix | lower }}{{ .State.Name | snake }}_state_event"
}

func (s *{{ .State.Name | camel }}StateDeclaration) Queue() string {
    return "{{ .Model.Prefix | lower }}{{ .State.Name | snake }}_state_event_queue"
}

func (s *{{ .State.Name | camel }}StateDeclaration) CanTransitIn(state model.State) bool {
    if state == {{ .State.Name | camel }}State {
        return true
    }
    {{range $val := .State.Transitions }}
    if state == {{ $val.State.Name | camel }}State {
        return true
    }
    {{end}}
    return false
}

func (s *{{ .State.Name | camel }}StateDeclaration) MaxRetiesCount() int {
    return {{ .State.MaxRetryCount }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) MinRetiesDelay() time.Duration {
    return {{ .MinRetryDelayFormatted }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) CancellationTTL() time.Duration {
    return {{ .CancellationTTLFormatted }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) FallbackState() model.State {
    {{- if and ( or .State.SuccessFinal .State.FailFinal .State.DisableFallbackState ) }}
    return nil
    {{- else}}
    return {{.State.Name | camel}}FailedState
    {{- end}}
}

func (s *{{ .State.Name | camel }}StateDeclaration) IsInitial() bool {
    {{- if .State.Initial }}
    return true
    {{- else }}
    return false
    {{- end }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) IsSuccessFinal() bool {
    {{- if .State.SuccessFinal }}
    return true
    {{- else }}
    return false
    {{- end }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) IsFailFinal() bool {
    {{- if .State.FailFinal }}
    return true
    {{- else }}
    return false
    {{- end }}
}

func (s *{{ .State.Name | camel }}StateDeclaration) Model() model.Model {
	return Model
}

func (s *{{ .State.Name | camel }}StateDeclaration) Service() Service {
    return Model.Service().(Service)
}