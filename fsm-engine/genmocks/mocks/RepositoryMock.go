// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/inplat/fsm-framework.git/fsm-engine/model"

	uuid "github.com/google/uuid"
)

// RepositoryMock is an autogenerated mock type for the RepositoryMock type
type RepositoryMock struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: ctx, tx
func (_m *RepositoryMock) CreateTransaction(ctx context.Context, tx model.Tx) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Tx) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transaction provides a mock function with given fields: ctx, txID
func (_m *RepositoryMock) Transaction(ctx context.Context, txID uuid.UUID) (model.Tx, error) {
	ret := _m.Called(ctx, txID)

	var r0 model.Tx
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Tx); ok {
		r0 = rf(ctx, txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Tx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *RepositoryMock) UpdateEvent(ctx context.Context, event *model.Event) error {
	ret := _m.Called(ctx, event)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Event) error); ok {
		r0 = rf(ctx, event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, tx, currState
func (_m *RepositoryMock) UpdateTransaction(ctx context.Context, tx model.Tx, currState string) error {
	ret := _m.Called(ctx, tx, currState)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Tx, string) error); ok {
		r0 = rf(ctx, tx, currState)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
