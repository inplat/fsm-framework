// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	lock "github.com/inplat/fsm-framework.git/fsm-engine/lock"

	mock "github.com/stretchr/testify/mock"
)

// LockLockerMock is an autogenerated mock type for the LockLockerMock type
type LockLockerMock struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *LockLockerMock) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsErrNotObtained provides a mock function with given fields: _a0
func (_m *LockLockerMock) IsErrNotObtained(_a0 error) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ObtainLock provides a mock function with given fields: ctx, key
func (_m *LockLockerMock) ObtainLock(ctx context.Context, key string) (lock.Lock, error) {
	ret := _m.Called(ctx, key)

	var r0 lock.Lock
	if rf, ok := ret.Get(0).(func(context.Context, string) lock.Lock); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(lock.Lock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
